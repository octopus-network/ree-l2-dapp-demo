type AddLiquidityInfo = record {
  btc_amount_for_add_liquidity : nat64;
  rune_amount_for_add_liquidity : nat;
};
type CoinBalance = record { id : text; value : nat };
type CookiePoolState = record {
  txid : text;
  utxo : Utxo;
  user_action : UserAction;
  nonce : nat64;
};
type CreateGameArgs = record {
  rune_premine_amount : nat;
  create_address : text;
  claim_amount_per_click : nat;
  game_name : text;
  claim_cooling_down : nat64;
  gamer_register_fee : nat64;
};
type ExchangeError = variant {
  InvalidSignPsbtArgs : text;
  InvalidNumeric;
  ParseUtxoRuneBalanceError : text;
  Overflow;
  InvalidInput;
  PoolAddressNotFound;
  NatConvertError : nat;
  PoolNotFound : text;
  RuneNotFound : text;
  CookieBalanceInsufficient : nat;
  GameEnd;
  GamerAlreadyExist : text;
  DuplicateBlock : record { nat32; text };
  PoolStateExpired : nat64;
  GamerNotFound : text;
  GameStatusNotMatch : record { GameStatus; GameStatus };
  GameNotEnd;
  TooSmallFunds;
  Unrecoverable;
  LastStateNotFound;
  InvalidRuneId;
  InvalidPool;
  InvalidPsbt : text;
  GameNotFound : text;
  PoolAlreadyExists;
  GamerCoolingDown : record { text; nat64 };
  InvalidTxid : text;
  InvalidLiquidity;
  DepositRuneBalanceIncorrect : record { text; text };
  EmptyPool;
  RuneIndexerResultError : text;
  LpNotFound;
  ChainKeyError;
  FetchRuneIndexerError : record { RejectionCode; text };
  CustomError : text;
  InvalidState : text;
  Recoverable : record { nat32; nat32 };
  InsufficientFunds;
  GamerWithdrawRepeatedly : text;
  RuneIdNotMatch : record { text; text };
  PoolAddressMismatch : record { actual : text; expected : text };
};
type ExchangeState = record {
  txid_game_map : vec record { text; text };
  games : vec record { text; Game };
};
type ExecuteTxArgs = record {
  zero_confirmed_tx_queue_length : nat32;
  txid : text;
  intention_set : IntentionSet;
  intention_index : nat32;
  psbt_hex : text;
};
type Game = record {
  creator : principal;
  claimed_cookies : nat;
  rune_premine_amount : nat;
  creator_address : text;
  rune_info : opt RuneInfo;
  gamers : vec record { text; Gamer };
  claim_amount_per_click : nat;
  game_id : text;
  game_status : GameStatus;
  game_name : text;
  etch_rune_commit_tx : text;
  claim_cooling_down : nat64;
  gamer_register_fee : nat64;
};
type GameAndPool = record {
  game : Game;
  pool_state : opt CookiePoolState;
  pool_metadata : opt Metadata;
};
type GameStatus = variant { WaitAddedLiquidity; Playing; Withdrawing; Etching };
type Gamer = record {
  is_withdrawn : bool;
  last_click_time : nat64;
  address : text;
  cookies : nat;
};
type GetPoolInfoArgs = record { pool_address : text };
type InputCoin = record { coin : CoinBalance; from : text };
type Intention = record {
  input_coins : vec InputCoin;
  output_coins : vec OutputCoin;
  action : text;
  exchange_id : text;
  pool_utxo_spent : vec text;
  action_params : text;
  nonce : nat64;
  pool_address : text;
  pool_utxo_received : vec Utxo;
};
type IntentionSet = record {
  tx_fee_in_sats : nat64;
  initiator_address : text;
  intentions : vec Intention;
};
type Metadata = record {
  key : text;
  name : text;
  key_derivation_path : vec blob;
  address : text;
};
type NewBlockInfo = record {
  block_hash : text;
  confirmed_txids : vec text;
  block_timestamp : nat64;
  block_height : nat32;
};
type OutputCoin = record { to : text; coin : CoinBalance };
type PoolBasic = record { name : text; address : text };
type PoolInfo = record {
  key : text;
  name : text;
  btc_reserved : nat64;
  key_derivation_path : vec blob;
  coin_reserved : vec CoinBalance;
  attributes : text;
  address : text;
  nonce : nat64;
  utxos : vec Utxo;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : nat; Err : ExchangeError };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok; Err : text };
type RollbackTxArgs = record { txid : text; reason_code : text };
type RuneInfo = record { rune_name : text; rune_id : text };
type UserAction = variant {
  Withdraw : record { text; text };
  AddLiquidity;
  Init;
  Register : record { text; text };
};
type Utxo = record {
  coins : vec CoinBalance;
  sats : nat64;
  txid : text;
  vout : nat32;
};
service : () -> {
  claim : (text) -> (Result);
  create_game : (CreateGameArgs) -> (Result_1);
  etch_rune : (text, text) -> (Result_1);
  execute_tx : (ExecuteTxArgs) -> (Result_1);
  finalize_etch : (text) -> (Result_1);
  get_exchange_state : () -> (ExchangeState) query;
  get_game_info : (text) -> (opt GameAndPool) query;
  get_game_pool_address : (text) -> (text);
  get_games_info : () -> (vec GameAndPool) query;
  get_pool_info : (GetPoolInfoArgs) -> (opt PoolInfo) query;
  get_pool_list : () -> (vec PoolBasic) query;
  new_block : (NewBlockInfo) -> (Result_2);
  query_add_liquidity_info : (text) -> (AddLiquidityInfo) query;
  rollback_tx : (RollbackTxArgs) -> (Result_2);
  test : () -> ();
}
